rm(list = ls())
mocking <- pdf_text("To-Kill-a-Mockingbird.pdf")
mocking2 <- strsplit(mocking, "/n")
mocking3 <- gsub("\r\n", " ", mocking2)
^hello
mocking3[35]
?print
grep("^Jem"  mocking3[35], value = T)
grep("^Jem",  mocking3[35], value = T)
grep("Jem",  mocking3[35], value = T)
mocking4 <- apply(mocking3, strsplit, ".")
mocking4 <- sapply(mocking3, strsplit, ".")
mocking4[35]
page35 <- strsplit(".", mocking3[35])
page35 <- strsplit(mocking3[35], ".")
page35
mocking3[35]
page35 <- strsplit(mocking3[35], ".")
page35
mocking2[55]
page55 <- strsplit(mocking2[55], "\r\n")
page55 <- strsplit(mocking2[55], "\r\n")
page55 <- strsplit(mocking2[55], \r\n)
strsplit(mocking2[55], "\r\n")
mocking3 <- gsub("\r\n", " ", mocking2)
mocking3[35]
page35 <- strsplit(mocking3[35], ".")
page35
page35 <- strsplit(mocking3[35], .)
mocking2[55]
strsplit(mocking2[55], "/r/n")
strsplit(mocking2[55], "r\n")
?strsplit
page55 <- strsplit(mocking2[55], "\r\n", fixed = T)
page35 <- strsplit(mocking3[35], ".", fixed = T)
head(page35)
?apply
mocking4 <- apply(mocking3, strsplit, ".", fixed = T)
mocking4 <- lapply(mocking3, strsplit, ".", fixed = T)
mocking4[[1]]
mocking4[[55]]
rm(list  = ls())
mocking <- pdf_text("To-Kill-a-Mockingbird.pdf")
head(mocking)
dim(mocking)
length(mocking)
class(mocking)
mocking <- gsub("\r\n", "n", mocking)
length(mocking)
head(mocking)
mocking <- strsplit(mocking, ".", fixed = T)
mocking[5]
mocking[[5]]
class(mocking[5])
names(mocking[5])
grep("America", mocking, value = T)
mocking[123]
grep('church', mocking[123], value = T)
grep('church', mocking[123])
grep('church', mocking[123][[1]])
mocking <- pdf_text("To-Kill-a-Mockingbird.pdf")
mocking <- gsub("\r\n", "\n", mocking)
mocking <- gsub("\r\n", "", mocking)
mocking <- as.list(mocking)
mocking <- as.list(mocking)
mocking[1]
mocking[11]
mocking <- pdf_text("To-Kill-a-Mockingbird.pdf")
mocking <- gsub("\r\n", " ", mocking)
mocking <- strsplit(mocking, ".", fixed = T)
grep('church', mocking[123][[1]], value = T)
grep('clergyman', mocking[123][[1]], value = T)
grep('clergy', mocking[123][[1]], value = T)
lapply(mocking, grep, 'clergymen', fixed = T)
lapply(mocking, grep, 'clergymen', value = T)
lapply(mocking, grep, 'clergymen', value = T)
lapply(mocking, grep, 'clergymen')
mocking <- gsub("\r\n", " ", mocking)
mocking <- pdf_text("To-Kill-a-Mockingbird.pdf")
mocking <- strsplit(mocking, "\r\n", fixed = T)
mocking[[5]]   #now each page is a element of a list, and everything divided by "." is a sub element of that list
mocking[5]   #now each page is a element of a list, and everything divided by "." is a sub element of that list
mocking[123]   #now each page is a element of a list, and everything divided by "." is a sub element of that list
grep('clergy', mocking[123][[1]], value = T)
grep('clergy', mocking[123], value = T)
grep('clergy', mocking[123][[1]], value = T)
grep('clergy', mocking[[123]], value = T)
grep('church', mocking[[123]], value = T)
mocking <- lapply(mocking, paste)
mocking[5]   #now each page is a element of a list, and everything divided by "." is a sub element of that list
head(mocking)
grep("America", mocking, value = T)
lapply(mocking, grep, "America", value = T)
lapply(mocking, grep, "church", value = T)
lapply(mocking, grep, "church")
grep("America", mocking, value = T)
grep("America", mocking)
mocking <- lapply(mocking, paste)
mocking[5]   #now each page is a element of a list, and everything divided by "." is a sub element of that list
grep("church", mocking)
grep("sex", mocking)
grep("penis", mocking)
grep("sex", mocking)
mocking[176]   #now each page is a element of a list, and everything divided by "." is a sub element of that list
grep("sex", mocking[176])
grep("sex", mocking[176], value = T)
grep("sex", mocking[[176]], value = T)
grep("Germany", mocking[[176]])
grep("german", mocking[[176]])
grep("Germany", mocking)
grep("german", mocking)
mocking2 <- lapply(mocking, unlist)
mocking2[5]
mocking2 <- unlist(mocking)
mocking2[5]   #now each page is a element of a list, and everything divided by "." is a sub element of that list
grep("german", mocking2)
grep("Germany", mocking2, value = T)
lapply(mocking, grep, "president")
grep("president", mocking2, value = T)
grep("^and", mocking2, value = T)
grep("^hello", mocking2, value = T)
grep("^and you", mocking2, value = T)
grep("morning$", mocking2, value = T)
grep("bye$", mocking2, value = T)
grep("screamed$", mocking2, value = T)
grep("morning.$", mocking2, value = T)
grep("[Kk][Ii][Ll][Ll]", mocking2, value = T)
grep("kill", mocking2, value = T)
grep("^[Ii] am", mocking2, value = T)
grep("^I am", mocking2, value = T)
grep("^i am", mocking2, value = T)
grep("^and I", mocking2, value = T)
grep("^and [Ii]", mocking2, value = T)
grep("[0-9][A-Za-z]", mocking2, value = T)
grep("[?]$", mocking2, value = T)
grep("[^?.,]$", mocking2, value = T)
grep("[^?., ]$", mocking2, value = T) #not ending with these
grep("[,]$", mocking2, value = T)
grep("president", mocking2, value = T)
grep("[Pp]resident", mocking2, value = T)
#functions explained previously, now see how to write the argument expression
grep("Cunnunghum", mocking2, value = T) #germany is a literal
#functions explained previously, now see how to write the argument expression
grep("Cunninghum", mocking2, value = T) #germany is a literal
#functions explained previously, now see how to write the argument expression
grep("Cunningham", mocking2, value = T) #germany is a literal
grep("9.11", mocking2, value = T)
grep("1.5", mocking2, value = T)
grep("ice|fire", mocking2, value = T)
grep("water|fire", mocking2, value = T)
grep("water|fire|air|earth", mocking2, value = T)
grep("[Aa]merica|[Gg]erman", mocking2, value = T)
grep("^[Gg]ood|[Bb]ad", mocking2, value = T)
grep("^([Gg]ood|[Bb]ad)", mocking2, value = T) #either of them but at beginning
grep("Jeffery", mocking2, value = T)
grep("Jeff", mocking2, value = T)
grep("said", mocking2, value = T)
grep("Judge", mocking2, value = T)
grep("Everett", mocking2, value = T)
grep("(J\.)? Grimes Everett", mocking2, value = T)
grep("( J\.)? Grimes Everett", mocking2, value = T)
grep("( [Jj]\.)? [Gg]rimes [Ee]verett", mocking2, value = T)
grep("( [Jj]/.)? [Gg]rimes [Ee]verett", mocking2, value = T)
grep("[Gg]rimes [Ee]verett", mocking2, value = T)
grep("([Jj]/.)? [Gg]rimes [Ee]verett", mocking2, value = T)
grep("([Jj].)? [Gg]rimes [Ee]verett", mocking2, value = T)
grep("([Jj]\.)? [Gg]rimes [Ee]verett", mocking2, value = T)
grep("([Jj]/.)? [Gg]rimes [Ee]verett", mocking2, value = T) #
#but not working currently, and \ also giving an error
grep("Grimes Everett", mocking2, value = T)
#but not working currently, and \ also giving an error
grep(" Everett", mocking2, value = T)
#but not working currently, and \ also giving an error
grep("Grimes ", mocking2, value = T)
#but not working currently, and \ also giving an error
grep("Atticus", mocking2, value = T)
#but not working currently, and \ also giving an error
grep("Atticus Finch", mocking2, value = T)
grep("Atticus( Finch)?", mocking2, value = T)
grep("said", mocking2, value = T)
#but not working currently, and \ also giving an error
grep("Jean Louise", mocking2, value = T)
#but not working currently, and \ also giving an error
grep(" Louise", mocking2, value = T)
#but not working currently, and \ also giving an error
grep("Miss Jean Louise", mocking2, value = T)
#but not working currently, and \ also giving an error
grep("(Miss)? Jean Louise", mocking2, value = T)
grep("Miss Jean Louise", mocking2, value = T)
grep("(Miss)? (Jean)? Louise", mocking2, value = T)
grep("(Miss)? (Jean)? (Louise)?", mocking2, value = T)
grep("(Miss)?( Jean)?( Louise)?", mocking2, value = T)
grep("Miss( Jean)?( Louise)?", mocking2, value = T)
grep("1\.5", mocking2, value = T)
grep("1(\.)5", mocking2, value = T)
grep("1[\.]5", mocking2, value = T)
grep("(.*)", mocking2, value = T)
grep("\(.*)", mocking2, value = T) #any character, repeated any number of times, thus the whole novel, as
#lecture video which said that eveything inside the paranthesis
grep("[0-9]+(.*)[0-9]", mocking2, value = T)
#lecture video which said that eveything inside the paranthesis
grep("[0-9]+ (.*)[0-9]", mocking2, value = T)
#lecture video which said that eveything inside the paranthesis
grep("[0-9]+ (.*)[0-9]+", mocking2, value = T)
grep("(Miss)? Jean Louise", mocking2, value = T) #now this is working
#then any one of the numbers 0-9
grep("Louise( +[^ ]+ ){3,5}said", mocking2, value = T)
#then any one of the numbers 0-9
grep("Louise( +[^ ]+ +){3,5}said", mocking2, value = T)
#then any one of the numbers 0-9
grep("Louise( +[^ ]+ +){1,5}said", mocking2, value = T)
#then any one of the numbers 0-9
grep("I( +[^ ]+ +){1,5}nothing", mocking2, value = T)
#then any one of the numbers 0-9
grep("I( +[^ ]+ +){2,5}nothing", mocking2, value = T)
#then any one of the numbers 0-9
grep("I( +[^ ]+ ){,5}nothing", mocking2, value = T)
#then any one of the numbers 0-9
grep("class( +[^ ]+ ){,5}morning", mocking2, value = T)
#then any one of the numbers 0-9
grep("class( +[^ ]+ +){,5}morning", mocking2, value = T)
#then any one of the numbers 0-9
grep("class( +[^ ]+ +){1,5}morning", mocking2, value = T)
#then any one of the numbers 0-9
grep("man( +[^ ]+ +){1,5}[Gg]od", mocking2, value = T)
grep("order( +[^ ]+ ){1,5}class", mocking2, value = T)
grep("order( +[^ ]+ ){1,10}class", mocking2, value = T)
grep("order( +[^ ]+|* ){1,10}class", mocking2, value = T)
#at least one something other than space, followed by atleast one space, repeated between 1-5 times
grep("saw( +[^ ]+ +){1,10}office", mocking2, value = T)
#at least one something other than space, followed by atleast one space, repeated between 1-5 times
grep("[Ss]aw( +[^ ]+ +){1,10}[Oo]ffice", mocking2, value = T)
#at least one something other than space, followed by atleast one space, repeated between 1-5 times
grep("saw( +[^ ]+ +){1,10} office", mocking2, value = T)
#at least one something other than space, followed by atleast one space, repeated between 1-5 times
grep("saw( +[^ ]+){1,10}office", mocking2, value = T) #not workind quite as I expect it to be
#at least one something other than space, followed by atleast one space, repeated between 1-5 times
grep("saw( +[^ ]+){1,10} office", mocking2, value = T) #not workind quite as I expect it to be
#then any one of the numbers 0-9
grep("class( +[^ ]+ ){1,5}nothing", mocking2, value = T) #search class followed by space (atleast one), followed be
#then any one of the numbers 0-9
grep("class( +[^ ]+ ){1,5}nothing", mocking2, value = T) #search class followed by space (atleast one), followed be
#then any one of the numbers 0-9
grep("class( +[^ ]+){1,5} nothing", mocking2, value = T) #search class followed by space (atleast one), followed be
#then any one of the numbers 0-9
grep("class( +[^ ]+){1,5} nothing", mocking2, value = T) #search class followed by space (atleast one), followed be
#then any one of the numbers 0-9
grep("saw( +[^ ]+){1,5} nothing", mocking2, value = T) #search class followed by space (atleast one), followed be
#then any one of the numbers 0-9
grep("I( +[^ ]+){1,5} nothing", mocking2, value = T) #search class followed by space (atleast one), followed be
#then any one of the numbers 0-9
grep("I( +[^ ]+){1,10} nothing", mocking2, value = T) #search class followed by space (atleast one), followed be
#then any one of the numbers 0-9
grep("I( +[^ ]+){1,2} nothing", mocking2, value = T) #search class followed by space (atleast one), followed be
#at least one something other than space, repeated between 1-5 times, follpwed by space and nothing
grep("I( +[^ ]+){1,10} nothig", mocking2, value = T) #now fine
#at least one something other than space, repeated between 1-5 times, follpwed by space and nothing
grep("I( +[^ ]+){1,10} nothing", mocking2, value = T) #now fine
#at least one something other than space, repeated between 1-5 times, follpwed by space and nothing
grep("I( +[^ ]+){5,} nothing", mocking2, value = T) #now fine
#at least one something other than space, repeated between 1-5 times, follpwed by space and nothing
grep("I( +[^ ]+){,5} nothing", mocking2, value = T) #now fine
#m,n between m and n matches, m = exactly m matches, m, atleast m matches, ,m = atmost m
grep(" +([a-zA-Z]+ +\1 +", mocking2, value = T)
#m,n between m and n matches, m = exactly m matches, m, atleast m matches, ,m = atmost m
grep(" +([a-zA-Z]+ +1 +", mocking2, value = T)
#m,n between m and n matches, m = exactly m matches, m, atleast m matches, ,m = atmost m
grep(" +([A-Za-z]+) +\1 +", mocking2, value = T)
#m,n between m and n matches, m = exactly m matches, m, atleast m matches, ,m = atmost m
grep(" +([A-Za-z]+) +\1", mocking2, value = T)
#m,n between m and n matches, m = exactly m matches, m, atleast m matches, ,m = atmost m
grep("bye bye", mocking2, value = T)
mocking3 <- c(mocking2, " bye bye", "hello hello hello", "bang bang bang bang")
grep(" +([A-Za-z]+) +\1 +", mocking3, value = T)
grep(" +([A-Za-z]+) +\1", mocking3, value = T) #definitely not work
grep(" +([A-Za-z]+) +1", mocking3, value = T) #definitely not work
grep(" +([A-Za-z]+) +/1", mocking3, value = T) #definitely not work
grep(" +([A-Za-z]+) +\1", mocking3, value = T) #definitely not work
?grep
library(base)
grep(" +([A-Za-z]+) +\1", mocking3, value = T) #definitely not work, \ have not been working anyway
grep(" +([A-Za-z]+) +\1 +", mocking3, value = T) #definitely not work, \ have not been working anyway
grep(" +([A-Za-z]+) +\'1 +", mocking3, value = T) #definitely not work, \ have not been working anyway
grep(" +([A-Za-z]+) +\\1 +", mocking3, value = T) #definitely not work, \ have not been working anyway
grep("([Jj]\\.)? [Gg]rimes [Ee]verett", mocking2, value = T) #supposed to work like, either if J. present or not
grep(" [Gg]rimes [Ee]verett", mocking2, value = T) #supposed to work like, either if J. present or not
grep("1\\.5", mocking2, value = T) #Error: '\.' is an unrecognized escape in character string starting ""1[\."
#m,n between m and n matches, m = exactly m matches, m, atleast m matches, ,m = atmost m
grep(" +([A-Za-z]+) +\\1 +", mocking2, value = T)
grep(" +([A-Za-z]+) +\\1 +", mocking3, value = T) #\\ is working
grep(" +([A-Za-z]+) +\\2 +", mocking3, value = T) #\\ is working
grep(" +([A-Za-z]+) +\\3 +", mocking3, value = T) #\\ is working
grep(" +([A-Za-z]+) +\\1 +", mocking3, value = T) #\\ is working
mocking3[8578]
grep("([A-Za-z]+) +\1", mocking3, value = T) #definitely not work, \ have not been working anyway
grep("([A-Za-z]+) +\1", mocking3, value = T) #definitely not work, \ have not been working anyway
grep("([A-Za-z]+) +\\1", mocking3, value = T) #definitely not work, \ have not been working anyway
#m,n between m and n matches, m = exactly m matches, m, atleast m matches, ,m = atmost m
grep("([A-Za-z]+) +\\1 +", mocking2, value = T)
grep("([A-Za-z]+) \\1 +", mocking3, value = T) #\\ is working
grep("([A-Za-z]+ ) \\1 +", mocking3, value = T) #\\ is working
grep("([A-Za-z]+ )\\1 +", mocking3, value = T) #\\ is working
#m,n between m and n matches, m = exactly m matches, m, atleast m matches, ,m = atmost m
grep("([A-Za-z]+) +\\1 +", mocking2, value = T)
#m,n between m and n matches, m = exactly m matches, m, atleast m matches, ,m = atmost m
grep(" +([A-Za-z]+) +\\1 +", mocking2, value = T)
grep(" +([A-Za-z]+) +\\1 +", mocking3, value = T) #\\ is working
grep("([A-Za-z]+) +\\1 +", mocking3, value = T) #\\ is working
grep("([A-Za-z]+) \\1 +", mocking3, value = T) #\\ is working
#but still cannot understand properly
grep("^s(.*)s$", mocking2, value = T)
#but still cannot  understand properly
grep("^s(.*)s", mocking2, value = T)
grep("^s(.*?)s$", mocking2, value = T)
date()
class(date())
d1 = date()
d1
class(d1)
d2 = Sys.time()
d2
class(d2)
names(d2)
?posixlt
?POSIXlt
d2$min
d2[min]
?format
format(d2, %a %d %B %y)
format(d2, %a%d %B %y)
format(d2, "%a %d %B %y")
format(d2, "%a %d %B %Y")
format(d2, "%a, %d %B %Y")
x <- c("ijan1960", "2jan1960", "31march1960", "30july1960") ; z <- as.POSIXlt(x, "%d%b%Y")
x <- c("ijan1960", "2jan1960", "31march1960", "30july1960") ; z <- as.Date(x, "%d%b%Y")
z
x <- c("1jan1960", "2jan1960", "31march1960", "30july1960") ; z <- as.Date(x, "%d%b%Y")
z
class(z)
as.POSIXlt(z)
#opposite of the above, reading random format into time in r
weekdays(d2)
months(d2)
weekdays(z)
months(z)
julian(z)
install.packages('lubridate')
library(lubridate)
ymd("19910821")
dmy('21081991')
dmy_hms('14081947 161553')
?Sys.timezone
ls(Sys.timezone)
ls(Sys.timezone())
Sys.timezone()
dmy_hms('14081947 161553', tz = "Asia/Karachi") #much much easier
wday(dmy(x))
wday(dmy(x), label = T)
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd(1920-1-2)
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minute = 34, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 12, minutes = 56)
this_moment
?now
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours(17), minutes(34))
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + (hours(15), minutes(50))
arrive <- depart +hours(15)+ minutes(50)
with_tz(arrive)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval()
?interval
how_long <- interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
housing <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
names <- names(housing)
names
splitnames <- strsplit(names, "wgtp")
splitnames[123]
#2
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
skip = 5, nrows = 190, header = F, stringsAsFactors = F) %>%
select(V1,V2, V4:V5) %>%
rename(countrycode = V1, ranking = V2, country = V4, milusd = V5)
head(gdp$milusd)
?sub
gdp$milusd <- sub(",", "", gdp$milusd)
head(gdp$milusd)
gdp$milusd <- gsub(",", "", gdp$milusd)
head(gdp$milusd)
mean(gdp$milusd)
class(gdp$milusd)
?read.csv
gdp$milusd <- gsub(",", "", gdp$milusd) %>% as.numeric(gdp$milusd)
head(gdp$milusd)
class(gdp$milusd)
head(gdp$milusd) ; class(gdp$milusd)
mean(gdp$milusd)
grep("^United", gdp$country)
grep("*United", gdp$country)
grep("United", gdp$country)
grep("^United", gdp$country)
#4
edu <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
head(edu)[, 3]
head(edu)[, 1:3]
colnames(edu)
match("fiscal", colnames(edu))
grep("fiscal", colnames(edu), value = T)
grep("yea", colnames(edu), value = T)
grep("year", colnames(edu), value = T)
grep("[Yy]ear", colnames(edu), value = T)
head(edu$National.accounts.base.year)
head(edu$National.accounts.reference.year)
grep("month", colnames(edu), value = T)
grep("month", colnames(edu), value = T)
grep("atecolnames(edu), value = T)
grep("date", colnames(edu), value = T)
names(gdp)
names(edu)
gdpedu <- (gdp, edu, "countrycode", "CountryCode")
gdpedu <- (gdp, edu, "countrycode", "CountryCode")
gdpedu <- merge(gdp, edu, "countrycode", "CountryCode")
gdpedu <- merge(x = gdp, y = edu, by.x = "countrycode", by.y = "CountryCode")
head(gdpedy)
head(gdpedu)
head(gdpedu$Latest.household.survey)
head(gdpedu$Special.Notes)
gdpedu[, "Special.Notes"]
length(grep("Fiscal year end", gdpedu$Special.Notes))
fiscal <- grep("Fiscal year end", gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end & June", gdpedu$Special.Notes, value = T)
fiscal <- grep("(Fiscal year end) & (June) " , gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end" , gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end" & "June" , gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end&June"  , gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end" , gdpedu$Special.Notes, value = T)
length(grep("June", fiscal))
fiscal <- grep("Fiscal year end" , gdpedu$Special.Notes, value = T) %>% grep("June")
fiscal <- grep("Fiscal year end" , gdpedu$Special.Notes, value = T)
grep("Fiscal year end(.*)June" , gdpedu$Special.Notes, value = T)
length(grep("Fiscal year end(.*)June" , gdpedu$Special.Notes, value = T))
sampleTimes = index(amzn)
#5
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
head(sampleTimes[20])
head(sampleTimes[188])
head(sampleTimes[189])
head(sampleTimes[300])
in2012 <in grep("2012", sampleTimes, value = T)
in2012 <-  grep("2012", sampleTimes, value = T)
?strptime
library(lubridate)
in2012 <- ymd(in2012)
2012logic <-
?wday
2012logic <- wday(in2012, label) == "Monday"
logic <- wday(in2012, label) == "Monday"
logic <- wday(in2012, label = T) == "Monday"
length(in2012[logic])
head(wday(in2012, label = T))
logic <- wday(in2012, label = T) == "Mon"
length(in2012[logic])
rm(list = ls())
?quantile
