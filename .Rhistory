?norm
?rnorm
pnorm(0.67, 0, 1)
pnorm(01, 0, 1)
pnorm(.97, 0, 1)
pnorm(Inf, 0, 1)
pnorm(1.43, 0, 1)
1 - pnorm(170.5, 162.2, 6.8)
pnorm(170.5, 162.2, 6.8) - pnorm(150.5, 162.2, 6.8)
q(10, 162.2, 6.8)
q(10, 162.2, 6.8)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
?head
head(plants, n = 10)
tail(plants, n = 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, replace = T, prob = c(.3, .7))
flips <- sample(c(0, 1), 100, replace = T, prob = c(.3, .7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flip2 <- rbinom(1, size = 100, prob = 0.7)
flip2 <- rbinom(100, 1, 0.7)
flip2 <- rbinom(100, size = 1, prob = 0.7)
flip2 <- rbinom(n = 100, size = 1, prob = 0.7)
flip2 <- rbinom(n = 100, size = 1, prob = 0.7)
rbinom(n = 100, size = 1, prob = 0.7)
flip2 <- rbinom(100, n = 1, prob = 0.7)
flip2 <- rbinom(100, size = 1, prob = 0.7)
flip2 <- rbinom(n = 100, size = 1, prob = 0.7)
rbinom(n = 100, size = 1, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
?replicate
my_pois <- replicate(100, rpois(5, 100))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot( x= cars$speed, y = cars$dist)
plot( x= cars$speed, y = cars$dist, names("speed", "Distance"))
plot( x= cars$speed, y = cars$dist, names("speed")
)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",  ylab = "Stopping Distance")
Plot(cars, main = "My Plot")
Plot(cars, main = "My Plot")
Plot(cars, main("My Plot"))
plot(cars)
plot(cars, main = "My Plot")
plot(cars, main = "My Plot Subtitle")
plot(cars, sub() = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
?par
plot(cars, xlim = c(10 ,15))
?pch
plot(cars, pch = 2)
load(mtcars)
data("mtcars")
data(mtcars)
play()
dim(mtcars)
colnames(mtcars)
head(mtcars)
summary(mtcars)
str(mtcars)
nxt()
?boxplot()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
?hist
hist(mtcars$mpg)
?read.csv
?list.files
pollutantmean <- function(directory, pollutant, id = 1:332){
data <- data.frame()
filenames <- list.files(path = directory, full.names = T)
for(i in id){
temp <- read.csv(file = filenames[i])
actdata <- rbind(data, temp)
mean(actdata[[pollutant]], na.rm = T)
}
}
pollutantmean("specdata", "Ozone", 20:30)
warnings()
pollutantmean <- function(directory, pollutant, id = 1:332){
data <- data.frame()
filenames <- list.files(path = directory, full.names = T)
for(i in id){
temp <- read.csv(file = filenames[i], colClasses = "numeric")
actdata <- rbind(data, temp)
mean(actdata[[pollutant]], na.rm = T)
}
}
pollutantmean("specdata", "Ozone", 20:30)
?list.files
pollutantmean <- function(directory, pollutant, id = 332){
filenames <- list.files(path = directory, pattern = ",csv", full.names = T)
data <- data.frame()
for(i in id){
temp <- read.csv(filenames[i])
data <- rbind(data, temp)
mean(data[[pollutant]], na.rm = T)
}
}
pollutantmean("specdata", "sulfate", 1:10)
debug()
debug(pollutantmean)
pollutantmean("specdata", "sulfate", 1:10)
x <- 1:10
x
x <- "faiza"
x
x <- 1:10
x
x
x <- "faiza"
x
y <- 1:10
y
z <- matrix(1:4, 2, 2)
x
y
z
class(x)
class(y)
a <- c(1, 1.1, 3, 4)
a
class(a)
class(z)
?mean()
print(x)
mean(y)
x
dim(a)
dim(z)
names(y)
length(x)
filenames <- list.files(path = "specdata")
filenames <- list.files(path = "specdata", full.names = T)
read.csv(filenames[2])
rm(list = ls())
filenames <- list.files("specdata", full.names = T)
data <- read.csv(filenames[20])
data1 <- read.csv(filenames[1])
data1 <- read.csv(filenames[111])
data3 <- rbind(data, data1)
mean(data3[ , "nitrate"])
mean(data3[ , "nitrate"], na.rm = T)
rm(list = ls())
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
data <- data.frame()
for(i in id){
temp <- read.csv(filenames[i])
data <- rbind(data, temp)
mean(data[ , pollutant], na.rm = T)
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
data <- data.frame()
for(i in id){
temp <- read.csv(filenames[i])
data <- rbind(data, temp)
print(mean(data[ , pollutant], na.rm = T))
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
data <- data.frame()
for(i in id){
temp <- read.csv(filenames[i])
data <<- rbind(data, temp)
}
mean(data[ , pollutant], na.rm = T)
}
pollutantmean("specdata", "sulfate", 1:10)
debug()
debug(pollutantmean)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
for(i in id){
data <- data.frame()
temp <- read.csv(filenames[i])
data <- rbind(data, temp)
mean(data[ , pollutant], na.rm = T)
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
for(i in id){
data <- data.frame()
temp <- read.csv(filenames[i])
data <- rbind(data, temp)
print(mean(data[ , pollutant], na.rm = T))
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
data <- data.frame()
for(i in id){
temp <- read.csv(filenames[i])
data <- rbind(data, temp)
}
print(mean(data[ , pollutant], na.rm = T)
}
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
data <- data.frame()
for(i in id){
temp <- read.csv(filenames[i])
data <- rbind(data, temp)
}
print(mean(data[ , pollutant], na.rm = T)
}
rm(pollutantmean)
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
data <- data.frame()
for(i in id){
temp <- read.csv(filenames[i])
data <- rbind(data, temp)
}
print(mean(data[ , pollutant], na.rm = T)
}
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
data <- data.frame()
for(i in id){
temp <- read.csv(filenames[i])
data <<- rbind(data, temp)
}
mean(data[ , pollutant], na.rm = T)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332){
filenames <- list.files(path = directory, full.names = T)
data <- data.frame()
for(i in id){
temp <- read.csv(filenames[i])
data <- rbind(data, temp)
}
mean(data[ , pollutant], na.rm = T)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 70:72)
debug(pollutantmean)
pollutantmean("specdata", "nitrate", 70:72)
temp <- read.csv("hw1_data.csv")
n <- complete.cases(temp)
sum(n)
temp[n]
temp[n, ]
setwd("D:/Documents/Coursera/Data Science/3. Getting and Cleaning Data")
x <- "Hello world!"
rm(x)
dir.create("test")
file.exists("test")
checkmakedir <- function(dirname){
if(file.exists(dirname)){
message("Directory already exists")
}
else {dir.create(dirname)}
}
checkmakedir("test")
checkmakedir("hello")
wd <- getwd()
download.file()
?download.file
wd
download.file(url = fileurl, destfile =  "D:/Documents/Coursera/Data Science/3. Getting and Cleaning Data/camea.csv",
method = "curl")
fileurl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(url = fileurl, destfile =  "D:/Documents/Coursera/Data Science/3. Getting and Cleaning Data/camea.csv",
method = "curl")
?read.data
?read.table
ls()
list.files
list.files()
cameradata <- read.table("camera.csv", header = T)
cameradata <- read.table("camera.csv",sep = ",", header = T)
cameradata <- read.table("camea.csv", header = T)
cameradata <- read.table("camea.csv", sep = ",",  header = T)
head(cameradata)
?read.table
cameradata <- read.table(file= "camea.csv", sep = ", ", header = T, skip = 5, nrows = 10)
cameradata <- read.table(file= "camea.csv", sep = ",", header = T, skip = 5, nrows = 10)
cameradata
fieurl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&bom=true&format=true"
download.file(url = fileurl, destfile = "camera.xlsx", method = "curl")
fileurl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&bom=true&format=true"
download.file(url = fileurl, destfile = "camera.xlsx", method = "curl")
list.files()
library(xlxs)
library(xlsx)
install.packages(xlsx)
install.packages("xlsx")
install.packages("xlsx package")
library(xlsx)
library('xlsx')
library(xlsx)
installed.packages()
install.packages("xlsx package")
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
load(xlsx)
library(xlsx)
library('xlsx')
?library
library(xlsxjars)
library(xlsx)
library()
library(xlsx)
library('xlsx')
library('C:/Users/EliteBook/Documents/R/win-library/3.5/xlsx')
library('xlsx')
install.packages(xlsx)
install.packages('xlsx')
library(xlsx)
source(xlsx)
?source
options(java.home="C:\Program Files\Java\jre1.8.0_25")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(xlsx)
?read.xlsx
cameradata <- read.xlsx(file= 'camera.xlsx', sheetIndex = 1)
cameradata <- read.xlsx(file= 'camera.xlsx', sheetIndex = 1, header = T)
cameradata <- read.xlsx("camera.xlsx", sheetIndex = 1)
download.file(url = "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&bom=true&format=true",
destfile = "cameras.xlsx")
cameradata <- read.xlsx(file = "cameras.xlsx", sheetIndex = 1, header = T)
?read.xlsx
library(xlsx)
?read.xlsx
cameradata <- read.xlsx(file = "cameras.xlsx", sheetIndex = 1)
cameradatasub <- read.xlsx(file = "cameras.xlsx", sheetIndex = 1,
colIndex = 2:6, rowIndex = 1:10, header = T)
cameradatasub
library(XML)
install.packages(XML)
install.packages('XML')
library(XML)
list(XML)
doc <- xmlTreeParse("https://www.w3schools.com/xml/simple.xml", useInternal = T)
doc <- xmlTreeParse("https://www.w3schools.com/xml/simple.xml")
doc <- xmlTreeParse("https://www.w3schools.com/xml/simple.xml", useInternalNodes = T)
?xmlTreeParse
doc <- xmlTreeParse(file ="https://www.w3schools.com/xml/simple.xml", useInternalNodes = T)
fileurl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileurl)
doc <- xmlTreeParse("food.xml")
do
doc
?xmlRoot
rootnode <- xmlroot(doc)
rootnode <- xmlRoot(doc)
rootnode
xmlName(rootnode)
names(rootnode)
rootnodee[[1]]
rootnode[[1]]
rootnode[3]
rootnode[[3]]
rootnode[[1]][[3]]
rootnode[[3]][[1]]
?xmlValue
xmlSApply(rootnode, xmlValue)
?xmlSApply
xmlApply(rootnode, xmlValue)
?xpathSApply
xpathSApply(rootnode, "//name", xmlvalue)
xpathSApply(rootnode, "//name", xmlValue)
xpathSApply(rootnode, "//name", xmlValue)
doc <- xmlTreeParse("food.xml")
rootnode <- xmlRoot(doc)
warnings()
xmlSApply(rootnode, xmlValue)
rootnode[[1]][[3]]
rootnode[[3]][[1]]
, "//
xpathSApply(rootnode, "//name", xmlValue)
xpathSApply(rootnode, "//price", xmlValue)
doc <- xmlTreeParse("https://www.w3schools.com/xml/simple.xml")
fileurl <- "http://www.espn.in/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileurl)
teams <- xpathSApply(doc, "//li[@class= 'team-name']", xmlValue)
teams <- xpathSApply(doc,"//li[@class= 'team-name']", xmlValue)
teams <- xpathSApply(doc,"//li[@class= 'team-name']", xmlValue)
scores <- xpathSApply(doc,"//li[@class= 'score']", xmlValue)
rootnode <- xmlRoot(doc)
scores <- xpathSApply(rootnode,"//li[@class= 'score']", xmlValue)
doc <- htmlTreeParse(fileurl)
scores <- xpathSApply(doc,"//li[@class= 'score']", xmlValue)
doc <- htmlTreeParse(fileurl, useInternalNodes = T)
scores <- xpathSApply(doc,"//li[@class= 'score']", xmlValue) ##error, not excecuting
scorea
scores
doc <- htmlTreeParse(fileurl, useInternalNodes = T)
teams <- xpathSApply(doc,"//li[@class= 'team-name']", xmlValue) ##error, not excecuting
teams
doc <- htmlTreeParse(fileurl, useInternal = T)
scores <- xpathSApply(doc,"//li[@class= 'score']", xmlValue) ##error, not excecuting
teams <- xpathSApply(doc,"//li[@class= 'team-name']", xmlValue) ##error, not excecuting
teams
scores
scores <- xpathSApply(doc,"//li[@class= 'score']", xmlValue) ##error, not excecuting
doc <- htmlTreeParse(fileurl)
scores <- xpathSApply(doc,"//li[@class= 'score']", xmlValue) ##error, not excecuting
teams <- xpathSApply(doc,"//li[@class= 'team-name']", xmlValue) ##error, not excecuting
, useInternal = T
doc <- htmlTreeParse(fileurl, useInternal = T)
doc <- htmlTreeParse(fileurl, useInternalNodes = T)
scores <- xpathSApply(doc,"//li[@class= 'score']", xmlValue) ##error, not excecuting
teams <- xpathSApply(doc,"//li[@class= 'team-name']", xmlValue) ##error, not excecuting
teams
scores
doc <- htmlTreeParse(fileurl, useInternal = T)
scores <- xpathSApply(doc,"//li[@class= 'score']", xmlValue) ##error, not excecuting
teams <- xpathSApply(doc,"//li[@class= 'team-name']", xmlValue) ##error, not excecuting
teams
scores
fileurl <- "http://www.espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileurl, useInternal = T)
scores <- xpathSApply(doc,"//li[@class= 'score']", xmlValue) ##error, results different than lectures
teams <- xpathSApply(doc,"//li[@class= 'team-name']", xmlValue) ##same
teams
scores
ranking <- xpathSApply(doc,"//li[@class= 'ranking']", xmlValue) ##same
ranking
xpathSApply(doc,"//li[@class= 'record']", xmlValue) ##same
xpathSApply(doc,"//li[@class= 'sub']", xmlValue) ##same
xpathSApply(doc,"//li[@class= 'user']", xmlValue) ##same
xpathSApply(doc,"//li[@class= 'tier-3']", xmlValue) ##same
xpathSApply(doc,"//li[@class= 'nextGame']", xmlValue) ##same
fileurl <- "http://www.espn.com/nfl/team/roster/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileurl, useInternal = T)
xpathSApply(doc, "//li[@class= 'name'", xmlValue)
xpathSApply(doc, "//li[@class= 'name']", xmlValue)
xpathSApply(doc, "//li[@class= 'active']", xmlValue)
xpathSApply(doc, "//li[@class= 'search']", xmlValue)
xpathSApply(doc, "//li[@class= 'user']", xmlValue)
xpathSApply(doc, "//li[@class= 'pillar fantasy']", xmlValue)
xpathSApply(doc, "//li[@class= 'pillar listen']", xmlValue)
xpathSApply(doc, "//li[@class= 'sub']", xmlValue)
library(swirl)
swril()
swirl()
install_from_swirl("Getting and Cleaning Data")
bye()
head(iris)
library(jsonlite)
myjson <- toJSON(iris, pretty = T`)
)
99(())
(())
)
)]}
}}}{{{{{}}}}}}}}}}}}}
library(jsonlite)
myjson <- toJSON(iris, pretty = TRUE)
myjson
cat(myjson)
cat(myjson)
rm(list = ls())
