xpathSApply(htmlabuji, "//a[@class = 'gsc_a_at']", xmlValue)
xpathSApply(htmlabuji, "html/head/title", xmlValue)
xpathSApply(htmlabuji, "html//head//title", xmlValue)
xpathSApply(htmlabuji, "html/head/title", xmlValue)
#using httr package
install.packages('httr')
library(httr)
pg1text <- content(pg1, as = 'text')
library(httr)
rm(list = ls())
url <- 'https://httpbin.org/basic-auth/user/passwd'
pg1 <- GET(url)
rary(httr)
library(httr)
## Reading from the web
library(XML)
pg1 <- GET(url)
pg1text <- content(pg1, as = 'text')
# error, no coding supplied, defaulting to UTF-8
# solved (XML package was not loaded)
pg1parsed <- htmlParse(pg1text, asText = T)
# error, no coding supplied, defaulting to UTF-8
# solved (XML package was not loaded)
pg1parsed <- htmlParse(pg1text, asText = T)
pg2 <- GET(url, authenticate("user", "passwd"))
pg2text <- content(pg2, as = 'text')
pg2parsed <- htmlParse(pg2text, asText = T)
## Reading from the web
library(XML)
pg2text <- content(pg2, as = 'text')
pg2parsed <- htmlParse(pg2text, asText = T)
xmlSApply(pg2parsed, '//user', xmlValue)
pg2root <- xmlRoot(pg2parsed)
xmlSApply(pg2root, '//user', xmlValue)
names(pg2) #but this is the way if needed
xmlSApply(pg2root, '//date', xmlValue)
xmlSApply(pg2root, '//times', xmlValue)
rm(list = ls())
install.packages('foreign')
url <- 'https://scholar.google.com.pk/citations?user=ffQSH1MAAAAJ&hl=en'
html2 <- GET(url)
library(httr)
url <- 'https://scholar.google.com.pk/citations?user=ffQSH1MAAAAJ&hl=en'
html2 <- GET(url)
htmltext <- content(html2, as = 'text')
htmlparsed <- htmlParse(htmltext, asText = T)
library(XML)
htmlparsed <- htmlParse(htmltext, asText = T)
xpathSApply(htmlparsed, "//title", xmlValue)
names(html2)
url <- 'https://httpbin.org/basic-auth/user/passwd'
pg1 <- GET(url)
pg1
pg2 <- GET(url, authenticate("user", "passwd"))
pg2
names(pg1) #giving the names, don't know why
names(pg2) #but this is the way if needed
pg2$handle
?GET
?handle
google <- handle("http://google.com")
google
pg1 <- GET(handle = google, path = "/")
pg1
pg2 <- GET(handle = google, path = "search")
pg2
##Reading from APIs
#uper se nikal gaya sab kuch
library(httr)
myapp <- oauth_app("twitter", )
myapp <- oauth_app("twitter",
key = "H8Bv9Oe9SYcjNpPSKB5izNjrr",
secret = "Yt8mMPyLXE82V9tnhyI0yiGpg4upGbUoK263iPrt03jZbFSqW6")
sig <- sign_oauth1.0(app = myapp,
token = "1938221286-qqc2JpygrfxcKlN6YRntGmJdJoJ5MwBhL6WiK9J",
token_secret = "HpukWwIpT957EhuG4ugeQxURGcoZocqRdVMNITfbzWAbu")
homeTL <- Get("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
library(jsonlite)
homejsondata <- fromJSON(homeTL)
names(homeTL)
names(homeTL$date)
names(homeTL$times)
names(homeTL$times$total)
homeTL$times$connect
homeTL$times$'connect'
json1 <- content(homeTL)
names(json1)
names(json1)
json1
json1[[1]]
json1[[1]][[1]]
names(json1[[1]])
json1[[1]][["retweeted"]]
json1[[1]][["retweet_count"]]
json1[[1]][["text"]]
names(json1) #Null
str(json1)
class(json1)
length(json1)
names(json1[[1]])
names(json1[[10]])
json1[[10]][["favourited"]]
json1[[10]][["lang"]]
json1[[10]][["text"]]
# ^ is the Json object extracted from the link
names(homeTL)
json2 <- jsonlite::fromJSON(toJSON(json1))
class(json2)
names(homeTL$id)
json1[[10]][[1]]
colnames(json2)
json2[1:4, c(1, 4)]
json2[1:4, 4)]
json2[1:4, 4]
json2[1:4, c(1, 4)]
json2[1:4, 1]
class(json2[1:4, 1])
json2[1, 1:4]
json2[1, 4]
library(httr)
oauth_endpoints("github")
mapp <- oauth_app("github",
key = "d99d10f365423b2036ba"
secret = "8f295ce18956f3a695b23869abb436c650f5c18c")
rm(list = ls())
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba"
secret = "8f295ce18956f3a695b23869abb436c650f5c18c")
library(httr)
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba"
secret = "8f295ce18956f3a695b23869abb436c650f5c18c")
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "8f295ce18956f3a695b23869abb436c650f5c18c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
sig <- sign_oauth1.0(app = myapp,
token = github_token)
github <- GET("https://api.github.com/users/jtleek/repos", sig)
rm(list = ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "8f295ce18956f3a695b23869abb436c650f5c18c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
gtoken
github <- GET("https://api.github.com/users/jtleek/repos", gtoken)
class(github)
hithub
github
stop_for_status(github)
library(httr)
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "8f295ce18956f3a695b23869abb436c650f5c18c
")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github <- GET("https://api.github.com/users/jtleek/repos", gtoken)
github
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "8f295ce18956f3a695b23869abb436c650f5c18c
")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
req <- GET("https://api.github.com/rate_limit", gtoken)
req
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
github <- content(req)
github
url <- "https://api.github.com/users/jtleek/repos"
req <- with_config(gtoken, GET(url))
req
rm(list = ls())
library(httr)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "8f295ce18956f3a695b23869abb436c650f5c18c
")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
url <- "https://api.github.com/users/jtleek/repos"
req <- GET(url , gtoken)
req
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET(url, gtoken)
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "8f295ce18956f3a695b23869abb436c650f5c18c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
url <- "https://api.github.com/users/jtleek/repos"
github <- GET(url, gtoken)
github
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = F)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "8f295ce18956f3a695b23869abb436c650f5c18c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = F)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = F)
12
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "8f295ce18956f3a695b23869abb436c650f5c18c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = F)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = F)
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
url <- "https://api.github.com/users/jtleek/repos"
github <- GET(url, gtoken)
github
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "8f295ce18956f3a695b23869abb436c650f5c18c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
url <- "https://api.github.com/users/jtleek/repos"
github <- GET(url, gtoken)
github
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET(url, gtoken)
req
content(req)
url <- "https://api.github.com/users/jtleek/repos"
github <- GET(url, gtoken)
json1 <- content(req)
names(json1)
names(json1[[1]])
json2 <- jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
colnames(json2)
nrow(json2)
json2$'created_at'
json2$'id'
colnames(json2)
json2$'name'
json2[json2$name == "datasharing", "created_at"]
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d99d10f365423b2036ba",
secret = "9b2c3f0531478c2cc81200067efb2a06a4d6b072")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
url <- "https://api.github.com/users/jtleek/repos"
github <- GET(url, gtoken)
github
json1 <- content(github)
json2 <- jsonlite::fromJSON(toJSON(json1))
class(json2)
str(json2)
colnames(json2)
json2[json2$name == "datasharing", "created_at"]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url = url, destfile = "acsd.csv")
acs <- read.csv("acsd.csv")
subset <- acs[acs$AGEP < 50, acs$pwgtp1]
subset <- acs[acs$AGEP << 50, acs$pwgtp1]
subset <- acs[acs$AGEP<<50, acs$pwgtp1]
subset <- acs[acs$AGEP==50, acs$pwgtp1]
match("AGEP", colnames(acs))
colnames(acs)
summary(acs$AGEP)
acs50 <- acs[acs$AGEP << 50 , ]
acs50 <- acs[acs$AGEP <50 , ]
subset <- acs[acs$AGEP<50, acs$pwgtp1]
subset <- acs[acs$AGEP <50, acs$pwgtp1]
subset <- acs[acs$AGEP <50, "pwgtp1"]
summary(subset)
plot(subset)
install.packages("sqldf")
library(sqldf)
subset2 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")
class(subset2)
class(subset)
head(subset2)
subset2 <- sqldf("select pwgtp1 from acs where AGEP< 50")
class(subset2)
class(subset)
head(subset2)
head(subset)
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
unq <- unique(acs$AGEP)
unq1 <- unique(acs$AGEP)
unq2 <- unqsqldf("select distinct AGEP from acs")
unq2 <- sqldf("select distinct AGEP from acs")
head(unq1)
head(unq2)
as.integer(head(unq2))
head(unq2)[ , 1]
identical(unq1, unq2[,1])
identical(subset, subset2[,1])
subset1 <- acs[acs$AGEP <50, "pwgtp1"]
identical(subset1, subset2[,1])
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlcode <- readLines(con)
close(con)
print(temp)
temp <- vector()
for(i in c(10, 20, 30, 100)){
temp <- vector()
temp[i] <- nchar(htmlcode[i])
print(temp)
}
temp <- paste(temp, nchar(htmlcode[i]))
for(i in c(10, 20, 30, 100)){
temp <- vector()
temp <- paste(temp, nchar(htmlcode[i]))
print(temp)
}
for(i in c(10, 20, 30, 100)){
temp <- vector()
temp <- c(temp, nchar(htmlcode[i]))
print(temp)
}
for(i in c(10, 20, 30, 100)){
temp <- integer()
temp <- c(temp, nchar(htmlcode[i]))
print(temp)
}
?read.fwf
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(url = url, destfile = "test.for")
read.fwf("test.for")
download.file(url = url, destfile = "test.fwf")
read.fwf("test.fwf")
download.file(url = url, destfile = "test.for")
test <- readLines(file=url)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
test <- readLines(file=url)
test <- readLines(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"))
readline(file=url)
readline(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"))
?read.line
?readline
?read.fwf
?readLines
?readline
?read.fwf
test <- read.fwf(file = "test.txt", widths = c(15, 4, 9, 4, 9, 4, 9, 4, 4 ), skip = 4)
head(test)
test1 <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
widths = c(15, 4, 9, 4, 9, 4, 9, 4, 4 ), skip = 4)
identical(test, test1)
sum(test[,4])
rm(list = ls())
data("UCBAdmissions")
df <- as.data.frame(UCBAdmissions)
df
UCBAdmissions
dim(UCBAdmissions)
xtabs(Freq ~ Gender + Admit, data = df)
?xtabs
colnames(df)
xtabs(Freq ~ Dept + Admit, data = df)
sum(df[df$Dept == "A"  & df$Admit = "Admitted", df$Freq])
sum(df[df$Dept == "A"  & df$Admit == "Admitted", df$Freq])
sum(df[df$Dept == "A"  & df$Admit == "Admitted", "Freq"])
sum(df[df$Dept == "B"  & df$Admit == "Admitted", "Freq"])
sum(df[df$Dept == "B"  & df$Admit == "Rejected", "Freq"])
df[df$Dept == "B"  & df$Admit == "Rejected", "Freq"]
colnames(df)
xtabs(Admit ~ Gender + Dept, data = df)
xtabs(Freq ~ Gender + Dept, data = df)
##Error in Summary.factor(1:2, na.rm = TRUE) :
##‘sum’ not meaningful for factors
str(warpbreaks)
head(warpbreaks)
nrows(war)
nrows(warpbreaks)
nrow(warpbreaks)
xtabs(breaks ~ A + L, data = warpbreaks)
xtabs(breaks ~ wool + tension, data = warpbreaks)
xtabs(breaks ~ tension + wool, data = warpbreaks)
xtabs(tension ~ breaks + wool, data = warpbreaks)
xtabs(breaks ~ tension + wool, data = warpbreaks)
xtabs(breaks ~ ., data = warpbreaks)
warpbreaks$replicate <- rep(1:9, nrow(warpbreaks))
warpbreaks$replicate <- rep(1:9, length =  nrow(warpbreaks))
head(warpbreaks)
xtabs(breaks ~ ., data = warpbreaks)
xt <- xtabs(breaks ~ ., data = warpbreaks)
?ftable
ftable(xt)
xtabs(breaks ~ ., data = warpbreaks) ## using "." instead of variable names will make
xt <- xtabs(breaks ~ ., data = warpbreaks) ## using "." instead of variable names will make
# cross tabs of all the variables. 2 X 2 is easy to understand, as more are added
# multidimensional arrays are made which are difficult to understand
ftable(xt)
object.size(UCBAdmissions)
urll <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
restdata <- read.csv(file = urll, stringsAsFactors = F)
?seq
seq(1, 10, by = 3)
seq(1, 10, length.out = 4)
seq(1, 10, by = 2)
x <- round(rnorm(10, 20, 5), 0)
x
seq_along(x)
seq(along = x)
colnames(restdata)
head(restdata$neighborhood)
restdata2 <- restdata
restdata$nearme <- restdata$neighborhood %in% c("Frankford", "Clifton Park")
head (restdata$nearme)
restdata[restdata$nearme == T, ]
restdata[restdata$nearme == T, "name"]
table(restdata$nearme)
?if
?ifelse
?ifelse
restdata$zipwrong <- ifelse(restdata$zipCode << 0, TRUE, FALSE)
restdata$zipwrong <- ifelse(restdata$zipCode < 0, TRUE, FALSE)
table(restdata$zipwrong)
?cut
quantile(x)
restdata$zipgroups <- cut(restdata$zipCode, breaks = quantile(restdata$zipCode))
table(restdata$zipgroups)
restdata$zipgroups <- cut(restdata$zipCode, breaks = quantile(restdata$zipCode),
labels = c("first", "second", "third", "fourth"))
table(restdata$zipgroups)
install.packages("Hmisc")
library(Hmisc)
?update
install.packages("installr")
library(installr)
updateR()
install.packages("stingr")
install.packages("stingi")
library(installr)
updater()
library(stringr)
?cut2
restdata$zipgroups2 <- cut2(restdata$zipCode, g = 4)
table(restdata$zipgroups2)
?quantile
restdata$zcf <- factor(restdata$zipCode)
head(restdata$zcf)
?table
table(restdata$zcf)
?relevel
library(plyr)
upadater()
updateR()
install.packages("stringr")
install.packages("stringr")
library(stringi)
library(stringr)
library(installr)
updateR()
?mutate
library(plyr)
?mutate
restdata3 <- mutate(restdata, zipgroups3 <- cut2(restdata, g=4))
library(Hmisc)
?mutate
library(plyr)
restdata3 <- mutate(restdata, zipgroups3 <- cut2(restdata, g=4))
install.packages("reshape2")
library(reshape2)
library(reshape2)
library(stringi)
library(stringr)
install.packages("stringi")
